<?xml version="1.0"?>
<doc>
    <assembly>
        "PhilLibX.Interop"
    </assembly>
    <members>
        <member name="M:PhilLibX.Compression.ZStandard.Compress(System.Byte[],System.Int32)">
            <summary>
Compresses an array of bytes of data
</summary>
            <param name="inputData">Byte array of data</param>
            <param name="compressionLevel">Compression Level between 1 and 22</param>
        </member>
        <member name="M:PhilLibX.Compression.ZStandard.Decompress(System.Byte[])">
            <summary>
Decompresses an array of bytes of decompressed data
</summary>
            <param name="compressedData">Byte array of compressed data</param>
        </member>
        <member name="T:PhilLibX.Compression.ZStandard">
            <summary>
ZStandard Interop Logic
</summary>
        </member>
        <member name="M:LZ4_versionNumber">
  Introduction

  LZ4 is lossless compression algorithm, providing compression speed at 500 MB/s per core,
  scalable with multi-cores CPU. It features an extremely fast decoder, with speed in
  multiple GB/s per core, typically reaching RAM speed limits on multi-core systems.

  The LZ4 compression library provides in-memory compression and decompression functions.
  Compression can be done in:
    - a single step (described as Simple Functions)
    - a single step, reusing a context (described in Advanced Functions)
    - unbounded multiple steps (described as Streaming compression)

  lz4.h provides block compression functions. It gives full buffer control to user.
  Decompressing an lz4-compressed block also requires metadata (such as compressed size).
  Each application is free to encode such metadata in whichever way it wants.

  An additional format, called LZ4 frame specification (doc/lz4_Frame_format.md),
  take care of encoding standard metadata alongside LZ4-compressed blocks.
  Frame format is required for interoperability.
  It is delivered through a companion API, declared in lz4frame.h.

</member>
        <member name="M:PhilLibX.Compression.LZ4.Compress(System.Byte[],System.Byte)">
            <summary>
Compresses an array of bytes of data
</summary>
            <param name="inputData">Byte array of data</param>
            <param name="compressionLevel">Compression Level</param>
        </member>
        <member name="M:PhilLibX.Compression.LZ4.Decompress(System.Byte[],System.Int32)">
            <summary>
Decompresses an array of bytes of decompressed data with a known decompressed size
</summary>
            <param name="compressedData">Byte array of compressed data</param>
            <param name="decompressedSize">Decompressed Size</param>
        </member>
        <member name="T:PhilLibX.Compression.LZ4">
            <summary>
LZ4 Interop Logic
</summary>
        </member>
        <member name="M:PhilLibX.Imaging.DirectXException.#ctor(System.String,System.Exception)">
            <summary>
Initializes a Compression Exception with a message and inner exception
</summary>
        </member>
        <member name="M:PhilLibX.Imaging.DirectXException.#ctor(System.String)">
            <summary>
Initializes a Compression Exception with a message
</summary>
        </member>
        <member name="M:PhilLibX.Imaging.DirectXException.#ctor">
            <summary>
Initializes a Compression Exception
</summary>
        </member>
        <member name="T:PhilLibX.Imaging.DirectXException">
            <summary>
DirectXException Exception
</summary>
        </member>
        <member name="M:PhilLibX.Imaging.ScratchImage.Dispose">
            <summary>
Destructs the ScratchImage and deletes the native DirectX::ScratchImage
</summary>
        </member>
        <member name="M:PhilLibX.Imaging.ScratchImage.ToBitmap(System.Int32,System.Int32,System.Int32)">
            <summary>
Converts the given mip/slice of the native DirectX::ScratchImage to a .NET <see cref="T:System.Drawing.Bitmap" /></summary>
            <param name="mip">Mip Map to convert</param>
            <param name="item">Item to convert</param>
            <param name="slice">Slice to convert</param>
        </member>
        <member name="M:PhilLibX.Imaging.ScratchImage.ToBitmap">
            <summary>
Converts the first mip/image and slice of the native DirectX::ScratchImage to a .NET <see cref="T:System.Drawing.Bitmap" /></summary>
        </member>
        <member name="M:PhilLibX.Imaging.ScratchImage.Save(System.String,PhilLibX.Imaging.ScratchImage.ImageFormat)">
            <summary>
Saves the <see cref="T:PhilLibX.Imaging.ScratchImage" /> to the given image path and type
</summary>
            <param name="filePath">Image file path</param>
            <param name="format">The <see cref="T:PhilLibX.Imaging.ScratchImage.ImageFormat" />/Type of the Image</param>
        </member>
        <member name="M:PhilLibX.Imaging.ScratchImage.Save(System.String)">
            <summary>
Saves the <see cref="T:PhilLibX.Imaging.ScratchImage" /> to the given image path
</summary>
            <param name="filePath">Image file path</param>
        </member>
        <member name="M:PhilLibX.Imaging.ScratchImage.Load(System.String,PhilLibX.Imaging.ScratchImage.ImageFormat)">
            <summary>
Loads the file into the <see cref="T:PhilLibX.Imaging.ScratchImage" /> from the given image path and type
</summary>
            <param name="filePath">Image file path</param>
            <param name="format">The <see cref="T:PhilLibX.Imaging.ScratchImage.ImageFormat" />/Type of the Image</param>
        </member>
        <member name="M:PhilLibX.Imaging.ScratchImage.Load(System.String)">
            <summary>
Loads the file into the <see cref="T:PhilLibX.Imaging.ScratchImage" /> from the given image path
</summary>
            <param name="filePath">Image file path</param>
        </member>
        <member name="M:PhilLibX.Imaging.ScratchImage.Load(System.Byte[],PhilLibX.Imaging.ScratchImage.ImageFormat)">
            <summary>
Loads the buffer into the <see cref="T:PhilLibX.Imaging.ScratchImage" /> from the given image buffer and type
</summary>
            <param name="buffer">Image file buffer</param>
            <param name="format">The <see cref="T:PhilLibX.Imaging.ScratchImage.ImageFormat" />/Type of the Image</param>
        </member>
        <member name="M:PhilLibX.Imaging.ScratchImage.GenerateMipMaps(System.Int32)">
            <summary>
Generates Mip Maps for the native DirectX::ScratchImage
</summary>
            <param name="mipMapCount">Number of Mip Maps to generate</param>
        </member>
        <member name="M:PhilLibX.Imaging.ScratchImage.Resize(System.Int32,System.Int32)">
            <summary>
Resizes the native DirectX::ScratchImage to the given width and height
</summary>
            <param name="width">Image Width</param>
            <param name="width">Image Height</param>
        </member>
        <member name="M:PhilLibX.Imaging.ScratchImage.ConvertImage(&lt;unknown type&gt;)">
            <summary>
Converts the native DirectX::ScratchImage to the given format
</summary>
            <param name="format">
                <see cref="T:PhilLibX.Imaging.ScratchImage.DXGIFormat" />
                <see cref="T:PhilLibX.Imaging.ScratchImage.DXGIFormat" /> to convert the image to</param>
        </member>
        <member name="M:PhilLibX.Imaging.ScratchImage.ClearLoadedImage">
            <summary>
Destructs the currently loaded native DirectX::ScratchImage
</summary>
        </member>
        <member name="M:PhilLibX.Imaging.ScratchImage.InitializeImage(PhilLibX.Imaging.ScratchImage.Metadata,System.Byte[])">
            <summary>
Initializes the native DirectX::ScratchImage with the params and given raw image buffer
</summary>
            <param name="metaData">Metadata to initialize the image with</param>
            <param name="buffer">Pixel buffer to apply to the image</param>
        </member>
        <member name="M:PhilLibX.Imaging.ScratchImage.InitializeImage(PhilLibX.Imaging.ScratchImage.Metadata)">
            <summary>
Initializes the native DirectX::ScratchImage with the given params
</summary>
            <param name="metaData">Metadata to initialize the image with</param>
        </member>
        <member name="M:PhilLibX.Imaging.ScratchImage.#ctor(System.String,PhilLibX.Imaging.ScratchImage.ImageFormat)">
            <summary>
Initializes an instance of the <see cref="T:PhilLibX.Imaging.ScratchImage" /> class with the given image path
</summary>
            <param name="filePath">Image file path</param>
            <param name="format">The <see cref="T:PhilLibX.Imaging.ScratchImage.ImageFormat" />/Type of the Image</param>
        </member>
        <member name="M:PhilLibX.Imaging.ScratchImage.#ctor(System.String)">
            <summary>
Initializes an instance of the <see cref="T:PhilLibX.Imaging.ScratchImage" /> class with the given image path
</summary>
            <param name="filePath">Image file path</param>
        </member>
        <member name="M:PhilLibX.Imaging.ScratchImage.#ctor(System.Byte[],PhilLibX.Imaging.ScratchImage.ImageFormat)">
            <summary>
Initializes an instance of the <see cref="T:PhilLibX.Imaging.ScratchImage" /> class with the given image buffer and type
</summary>
            <param name="buffer">Image file buffer</param>
            <param name="format">The <see cref="T:PhilLibX.Imaging.ScratchImage.ImageFormat" />/Type of the Image</param>
        </member>
        <member name="M:PhilLibX.Imaging.ScratchImage.#ctor(PhilLibX.Imaging.ScratchImage.Metadata,System.Byte[])">
            <summary>
Initializes an instance of the <see cref="T:PhilLibX.Imaging.ScratchImage" /> class with the params and given raw image buffer
</summary>
            <param name="metaData">Metadata to initialize the image with</param>
            <param name="buffer">Pixel buffer to apply to the image</param>
        </member>
        <member name="M:PhilLibX.Imaging.ScratchImage.#ctor(PhilLibX.Imaging.ScratchImage.Metadata)">
            <summary>
Initializes an instance of the <see cref="T:PhilLibX.Imaging.ScratchImage" /> class with the given params
</summary>
            <param name="metaData">Metadata to initialize the image with</param>
        </member>
        <member name="T:PhilLibX.Imaging.ScratchImage.Metadata">
            <summary>
Texture Metadata
</summary>
        </member>
        <member name="M:PhilLibX.Imaging.ScratchImage.GetImageFormatForExtension(System.String)">
            <summary>
Gets the output format for the given extension, if unrecognized, DDS is returned
</summary>
            <param name="extension">Extension to check</param>
        </member>
        <member name="T:PhilLibX.Imaging.ScratchImage.ImageFormat">
            <summary>
Image Format
</summary>
        </member>
        <member name="T:PhilLibX.Imaging.ScratchImage.TexMiscFlags2">
            <summary>
Misc. Texture Flags
</summary>
        </member>
        <member name="T:PhilLibX.Imaging.ScratchImage.TexMiscFlags">
            <summary>
Misc. Texture Flags
</summary>
        </member>
        <member name="T:PhilLibX.Imaging.ScratchImage.TexDimension">
            <summary>
Texture Dimension
</summary>
        </member>
        <member name="T:PhilLibX.Imaging.ScratchImage.DXGIFormat">
            <summary>
DDS/DXGI Formats
</summary>
        </member>
        <member name="M:PhilLibX.Imaging.ScratchImage.SetCustomPropertiesTIFF(IPropertyBag2*)">
            <summary>
Sets custom properties for TIFF Images (for use with LoadFromWICMemory(...))
</summary>
            <param name="props">Property Bag to apply the custom properties to</param>
        </member>
        <member name="M:PhilLibX.Imaging.ScratchImage.SetCustomPropertiesJPG(IPropertyBag2*)">
            <summary>
Sets custom properties for JPG Images (for use with LoadFromWICMemory(...))
</summary>
            <param name="props">Property Bag to apply the custom properties to</param>
        </member>
        <member name="F:PhilLibX.Imaging.ScratchImage.ScratchImagePointer">
            <summary>
Native Scratch Image Pointer
</summary>
        </member>
        <member name="T:PhilLibX.Imaging.ScratchImage">
            <summary>
A basic wrapper around Microsoft's DirectXTex ScratchImage
</summary>
        </member>
        <member name="M:PhilLibX.InteropUtility.ToStdWString(System.String,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Converts a managed string to a standard wide C++ string
</summary>
            <param name="stringInput">Input Managed String</param>
            <param name="stringOutput">Output wide C++ String</param>
        </member>
        <member name="M:PhilLibX.InteropUtility.ToStdString(System.String,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Converts a managed string to a standard C++ string
</summary>
            <param name="stringInput">Input Managed String</param>
            <param name="stringOutput">Output C++ String</param>
        </member>
        <member name="M:ZSTD_getBlockSize(ZSTD_CCtx_s!System.Runtime.CompilerServices.IsConst*)">
Block level API       
</member>
        <member name="M:ZSTD_getFrameHeader(ZSTD_frameHeader*,System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
ZSTD_getFrameHeader() :
 *  decode Frame Header, or requires larger `srcSize`.
 * @return : 0, `zfhPtr` is correctly filled,
 *          &gt;0, `srcSize` is too small, value is wanted `srcSize` amount,
 *           or an error code, which can be tested using ZSTD_isError() 
</member>
        <member name="M:ZSTD_compressBegin(ZSTD_CCtx_s*,System.Int32)">
  Buffer-less streaming compression (synchronous mode)

  A ZSTD_CCtx object is required to track streaming operations.
  Use ZSTD_createCCtx() / ZSTD_freeCCtx() to manage resource.
  ZSTD_CCtx object can be re-used multiple times within successive compression operations.

  Start by initializing a context.
  Use ZSTD_compressBegin(), or ZSTD_compressBegin_usingDict() for dictionary compression,
  or ZSTD_compressBegin_advanced(), for finer parameter control.
  It's also possible to duplicate a reference context which has already been initialized, using ZSTD_copyCCtx()

  Then, consume your input using ZSTD_compressContinue().
  There are some important considerations to keep in mind when using this advanced function :
  - ZSTD_compressContinue() has no internal buffer. It uses externally provided buffers only.
  - Interface is synchronous : input is consumed entirely and produces 1+ compressed blocks.
  - Caller must ensure there is enough space in `dst` to store compressed data under worst case scenario.
    Worst case evaluation is provided by ZSTD_compressBound().
    ZSTD_compressContinue() doesn't guarantee recover after a failed compression.
  - ZSTD_compressContinue() presumes prior input ***is still accessible and unmodified*** (up to maximum distance size, see WindowLog).
    It remembers all previous contiguous blocks, plus one separated memory segment (which can itself consists of multiple contiguous blocks)
  - ZSTD_compressContinue() detects that prior input has been overwritten when `src` buffer overlaps.
    In which case, it will "discard" the relevant memory section from its history.

  Finish a frame with ZSTD_compressEnd(), which will write the last block(s) and optional checksum.
  It's possible to use srcSize==0, in which case, it will write a final empty block to end the frame.
  Without last block mark, frames are considered unfinished (hence corrupted) by compliant decoders.

  `ZSTD_CCtx` object can be re-used (ZSTD_compressBegin()) to compress again.

</member>
        <member name="M:ZSTD_initCStream_usingCDict_advanced(ZSTD_CCtx_s*,ZSTD_CDict_s!System.Runtime.CompilerServices.IsConst*,ZSTD_frameParameters,System.UInt64)">
! ZSTD_initCStream_usingCDict_advanced() :
 * This function is deprecated, and is approximately equivalent to:
 *     ZSTD_CCtx_reset(zcs, ZSTD_reset_session_only);
 *     ZSTD_CCtx_setZstdFrameParams(zcs, fParams); // Set the zstd frame params and leave the rest as-is
 *     ZSTD_CCtx_setPledgedSrcSize(zcs, pledgedSrcSize);
 *     ZSTD_CCtx_refCDict(zcs, cdict);
 *
 * same as ZSTD_initCStream_usingCDict(), with control over frame parameters.
 * pledgedSrcSize must be correct. If srcSize is not known at init time, use
 * value ZSTD_CONTENTSIZE_UNKNOWN.

</member>
        <member name="M:ZSTD_initCStream_usingCDict(ZSTD_CCtx_s*,ZSTD_CDict_s!System.Runtime.CompilerServices.IsConst*)">
! ZSTD_initCStream_usingCDict() :
 * This function is deprecated, and equivalent to:
 *     ZSTD_CCtx_reset(zcs, ZSTD_reset_session_only);
 *     ZSTD_CCtx_refCDict(zcs, cdict);
 *
 * note : cdict will just be referenced, and must outlive compression session

</member>
        <member name="M:ZSTD_initCStream_advanced(ZSTD_CCtx_s*,System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32,ZSTD_parameters,System.UInt64)">
! ZSTD_initCStream_advanced() :
 * This function is deprecated, and is approximately equivalent to:
 *     ZSTD_CCtx_reset(zcs, ZSTD_reset_session_only);
 *     ZSTD_CCtx_setZstdParams(zcs, params); // Set the zstd params and leave the rest as-is
 *     ZSTD_CCtx_setPledgedSrcSize(zcs, pledgedSrcSize);
 *     ZSTD_CCtx_loadDictionary(zcs, dict, dictSize);
 *
 * pledgedSrcSize must be correct. If srcSize is not known at init time, use
 * value ZSTD_CONTENTSIZE_UNKNOWN. dict is loaded with ZSTD_dm_auto and ZSTD_dlm_byCopy.

</member>
        <member name="M:ZSTD_initCStream_srcSize(ZSTD_CCtx_s*,System.Int32,System.UInt64)">
! ZSTD_initCStream_srcSize() :
 * This function is deprecated, and equivalent to:
 *     ZSTD_CCtx_reset(zcs, ZSTD_reset_session_only);
 *     ZSTD_CCtx_refCDict(zcs, NULL); // clear the dictionary (if any)
 *     ZSTD_CCtx_setParameter(zcs, ZSTD_c_compressionLevel, compressionLevel);
 *     ZSTD_CCtx_setPledgedSrcSize(zcs, pledgedSrcSize);
 *
 * pledgedSrcSize must be correct. If it is not known at init time, use
 * ZSTD_CONTENTSIZE_UNKNOWN. Note that, for compatibility with older programs,
 * "0" also disables frame content size field. It may be enabled in the future.

</member>
        <member name="M:ZSTD_decompressBound(System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
ZSTD_decompressBound() :
 *  `src` should point to the start of a series of ZSTD encoded and/or skippable frames
 *  `srcSize` must be the _exact_ size of this series
 *       (i.e. there should be a frame boundary at `src + srcSize`)
 *  @return : - upper-bound for the decompressed size of all data in all successive frames
 *            - if an error occured: ZSTD_CONTENTSIZE_ERROR
 *
 *  note 1  : an error can occur if `src` contains an invalid or incorrectly formatted frame.
 *  note 2  : the upper-bound is exact when the decompressed size field is available in every ZSTD encoded frame of `src`.
 *            in this case, `ZSTD_findDecompressedSize` and `ZSTD_decompressBound` return the same value.
 *  note 3  : when the decompressed size field isn't available, the upper-bound for that frame is calculated by:
 *              upper-bound = # blocks * min(128 KB, Window_Size)

</member>
        <member name="M:ZSTD_compressStream(ZSTD_CCtx_s*,ZSTD_outBuffer_s*,ZSTD_inBuffer_s*)">
Alternative for ZSTD_compressStream2(zcs, output, input, ZSTD_e_continue).
NOTE: The return value is different. ZSTD_compressStream() returns a hint for
the next read size (if non-zero and not an error). ZSTD_compressStream2()
returns the number of bytes left to flush (if non-zero and not an error).

</member>
        <member name="M:ZSTD_initCStream(ZSTD_CCtx_s*,System.Int32)">
 Equivalent to:

     ZSTD_CCtx_reset(zcs, ZSTD_reset_session_only);
     ZSTD_CCtx_refCDict(zcs, NULL); // clear the dictionary (if any)
     ZSTD_CCtx_setParameter(zcs, ZSTD_c_compressionLevel, compressionLevel);

</member>
        <member name="M:PhilLibX.Compression.CompressionException.#ctor(System.String,System.Exception)">
            <summary>
Initializes a Compression Exception with a message and inner exception
</summary>
        </member>
        <member name="M:PhilLibX.Compression.CompressionException.#ctor(System.String)">
            <summary>
Initializes a Compression Exception with a message
</summary>
        </member>
        <member name="M:PhilLibX.Compression.CompressionException.#ctor">
            <summary>
Initializes a Compression Exception
</summary>
        </member>
        <member name="T:PhilLibX.Compression.CompressionException">
            <summary>
Compression Exception
</summary>
        </member>
        <member name="M:PhilLibX.Compression.ZLIB.Compress(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
Compresses a stream to the output stream
</summary>
            <param name="inputStream">Input Stream</param>
            <param name="outputStream">Output Stream</param>
            <param name="compressionLevel">Compression Level</param>
        </member>
        <member name="M:PhilLibX.Compression.ZLIB.Compress(System.Byte[],System.Int32)">
            <summary>
Compresses an array of bytes of data
</summary>
            <param name="inputData">Byte array of data</param>
            <param name="compressionLevel">Compression Level</param>
        </member>
        <member name="M:PhilLibX.Compression.ZLIB.Decompress(System.IO.Stream,System.IO.Stream)">
            <summary>
Decompresses a zlib stream to the output stream
</summary>
            <param name="inputStream">Input Stream</param>
            <param name="outputStream">Output Stream</param>
        </member>
        <member name="M:PhilLibX.Compression.ZLIB.Decompress(System.Byte[])">
            <summary>
Decompresses an array of bytes of compressed data
</summary>
            <param name="inputData">Input Data</param>
        </member>
        <member name="T:PhilLibX.Compression.ZLIB">
            <summary>
ZLIB Interop Logic
</summary>
        </member>
        <!-- Discarding badly formed XML document comment for member 'M:ZSTD_flushStream(ZSTD_CCtx_s*,ZSTD_outBuffer_s*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ZSTD_endStream(ZSTD_CCtx_s*,ZSTD_outBuffer_s*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ZSTD_initCStream_usingDict(ZSTD_CCtx_s*,System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ZSTD_flushStream(ZSTD_CCtx_s*,ZSTD_outBuffer_s*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ZSTD_endStream(ZSTD_CCtx_s*,ZSTD_outBuffer_s*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ZSTD_initCStream_usingDict(ZSTD_CCtx_s*,System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ZSTD_flushStream(ZSTD_CCtx_s*,ZSTD_outBuffer_s*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ZSTD_endStream(ZSTD_CCtx_s*,ZSTD_outBuffer_s*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ZSTD_initCStream_usingDict(ZSTD_CCtx_s*,System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.Int32)'. -->
    </members>
</doc>